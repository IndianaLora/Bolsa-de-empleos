
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : never : never
};


/**
 * Model User
 */

export type User = {
  id: number
  username: string
  password: string
  roleId: number
}

/**
 * Model UserRole
 */

export type UserRole = {
  id: number
  name: string
}

/**
 * Model Job
 */

export type Job = {
  id: number
  title: string
  position: string
  companyName: string
  companyLogo: string
  companyLocation: string
  url: string
  createdAt: Date
  userId: number
  categoryId: number
  typeId: number
}

/**
 * Model JobCategory
 */

export type JobCategory = {
  id: number
  name: string
}

/**
 * Model JobType
 */

export type JobType = {
  id: number
  name: string
}

/**
 * Model Setting
 */

export type Setting = {
  name: string
  value: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.userRole`: Exposes CRUD operations for the **UserRole** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserRoles
    * const userRoles = await prisma.userRole.findMany()
    * ```
    */
  get userRole(): Prisma.UserRoleDelegate<GlobalReject>;

  /**
   * `prisma.job`: Exposes CRUD operations for the **Job** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jobs
    * const jobs = await prisma.job.findMany()
    * ```
    */
  get job(): Prisma.JobDelegate<GlobalReject>;

  /**
   * `prisma.jobCategory`: Exposes CRUD operations for the **JobCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JobCategories
    * const jobCategories = await prisma.jobCategory.findMany()
    * ```
    */
  get jobCategory(): Prisma.JobCategoryDelegate<GlobalReject>;

  /**
   * `prisma.jobType`: Exposes CRUD operations for the **JobType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JobTypes
    * const jobTypes = await prisma.jobType.findMany()
    * ```
    */
  get jobType(): Prisma.JobTypeDelegate<GlobalReject>;

  /**
   * `prisma.setting`: Exposes CRUD operations for the **Setting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Settings
    * const settings = await prisma.setting.findMany()
    * ```
    */
  get setting(): Prisma.SettingDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.17.0
   * Query Engine version: 3c463ebd78b1d21d8fdacdd27899e280cf686223
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  export type Union = any

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    UserRole: 'UserRole',
    Job: 'Job',
    JobCategory: 'JobCategory',
    JobType: 'JobType',
    Setting: 'Setting'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }


  /**
   * Model User
   */


  export type AggregateUser = {
    count: UserCountAggregateOutputType | null
    avg: UserAvgAggregateOutputType | null
    sum: UserSumAggregateOutputType | null
    min: UserMinAggregateOutputType | null
    max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number
    roleId: number
  }

  export type UserSumAggregateOutputType = {
    id: number
    roleId: number
  }

  export type UserMinAggregateOutputType = {
    id: number
    username: string | null
    password: string | null
    roleId: number
  }

  export type UserMaxAggregateOutputType = {
    id: number
    username: string | null
    password: string | null
    roleId: number
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number | null
    password: number | null
    roleId: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    roleId?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    roleId?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
    roleId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
    roleId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    roleId?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
    [P in keyof T & keyof AggregateUser]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }



  export type UserSelect = {
    id?: boolean
    username?: boolean
    password?: boolean
    roleId?: boolean
    role?: boolean | UserRoleArgs
    Job?: boolean | JobFindManyArgs
  }

  export type UserInclude = {
    role?: boolean | UserRoleArgs
    Job?: boolean | JobFindManyArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'role'
        ? UserRoleGetPayload<S['include'][P]> :
        P extends 'Job'
        ? Array < JobGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof User ?User [P]
  : 
          P extends 'role'
        ? UserRoleGetPayload<S['select'][P]> :
        P extends 'Job'
        ? Array < JobGetPayload<S['select'][P]>>  : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    role<T extends UserRoleArgs = {}>(args?: Subset<T, UserRoleArgs>): CheckSelect<T, Prisma__UserRoleClient<UserRole | null >, Prisma__UserRoleClient<UserRoleGetPayload<T> | null >>;

    Job<T extends JobFindManyArgs = {}>(args?: Subset<T, JobFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Job>>, PrismaPromise<Array<JobGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
    **/
    data: XOR<UserUncheckedCreateInput, UserCreateInput>
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
    **/
    data: XOR<UserUncheckedUpdateInput, UserUpdateInput>
    /**
     * Choose, which User to update.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    data: XOR<UserUncheckedUpdateManyInput, UserUpdateManyMutationInput>
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
    **/
    create: XOR<UserUncheckedCreateInput, UserCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<UserUncheckedUpdateInput, UserUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
  }



  /**
   * Model UserRole
   */


  export type AggregateUserRole = {
    count: UserRoleCountAggregateOutputType | null
    avg: UserRoleAvgAggregateOutputType | null
    sum: UserRoleSumAggregateOutputType | null
    min: UserRoleMinAggregateOutputType | null
    max: UserRoleMaxAggregateOutputType | null
  }

  export type UserRoleAvgAggregateOutputType = {
    id: number
  }

  export type UserRoleSumAggregateOutputType = {
    id: number
  }

  export type UserRoleMinAggregateOutputType = {
    id: number
    name: string | null
  }

  export type UserRoleMaxAggregateOutputType = {
    id: number
    name: string | null
  }

  export type UserRoleCountAggregateOutputType = {
    id: number
    name: number | null
    _all: number
  }


  export type UserRoleAvgAggregateInputType = {
    id?: true
  }

  export type UserRoleSumAggregateInputType = {
    id?: true
  }

  export type UserRoleMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type UserRoleMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type UserRoleCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type UserRoleAggregateArgs = {
    /**
     * Filter which UserRole to aggregate.
    **/
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
    **/
    orderBy?: Enumerable<UserRoleOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserRoles
    **/
    count?: true | UserRoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: UserRoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: UserRoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: UserRoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: UserRoleMaxAggregateInputType
  }

  export type GetUserRoleAggregateType<T extends UserRoleAggregateArgs> = {
    [P in keyof T & keyof AggregateUserRole]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserRole[P]>
      : GetScalarType<T[P], AggregateUserRole[P]>
  }



  export type UserRoleSelect = {
    id?: boolean
    name?: boolean
    user?: boolean | UserFindManyArgs
  }

  export type UserRoleInclude = {
    user?: boolean | UserFindManyArgs
  }

  export type UserRoleGetPayload<
    S extends boolean | null | undefined | UserRoleArgs,
    U = keyof S
      > = S extends true
        ? UserRole
    : S extends undefined
    ? never
    : S extends UserRoleArgs | UserRoleFindManyArgs
    ?'include' extends U
    ? UserRole  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user'
        ? Array < UserGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof UserRole ?UserRole [P]
  : 
          P extends 'user'
        ? Array < UserGetPayload<S['select'][P]>>  : never
  } 
    : UserRole
  : UserRole


  type UserRoleCountArgs = Merge<
    Omit<UserRoleFindManyArgs, 'select' | 'include'> & {
      select?: UserRoleCountAggregateInputType | true
    }
  >

  export interface UserRoleDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one UserRole that matches the filter.
     * @param {UserRoleFindUniqueArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserRoleFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserRoleFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserRole'> extends True ? CheckSelect<T, Prisma__UserRoleClient<UserRole>, Prisma__UserRoleClient<UserRoleGetPayload<T>>> : CheckSelect<T, Prisma__UserRoleClient<UserRole | null >, Prisma__UserRoleClient<UserRoleGetPayload<T> | null >>

    /**
     * Find the first UserRole that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindFirstArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserRoleFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserRoleFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserRole'> extends True ? CheckSelect<T, Prisma__UserRoleClient<UserRole>, Prisma__UserRoleClient<UserRoleGetPayload<T>>> : CheckSelect<T, Prisma__UserRoleClient<UserRole | null >, Prisma__UserRoleClient<UserRoleGetPayload<T> | null >>

    /**
     * Find zero or more UserRoles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserRoles
     * const userRoles = await prisma.userRole.findMany()
     * 
     * // Get first 10 UserRoles
     * const userRoles = await prisma.userRole.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userRoleWithIdOnly = await prisma.userRole.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserRoleFindManyArgs>(
      args?: SelectSubset<T, UserRoleFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<UserRole>>, PrismaPromise<Array<UserRoleGetPayload<T>>>>

    /**
     * Create a UserRole.
     * @param {UserRoleCreateArgs} args - Arguments to create a UserRole.
     * @example
     * // Create one UserRole
     * const UserRole = await prisma.userRole.create({
     *   data: {
     *     // ... data to create a UserRole
     *   }
     * })
     * 
    **/
    create<T extends UserRoleCreateArgs>(
      args: SelectSubset<T, UserRoleCreateArgs>
    ): CheckSelect<T, Prisma__UserRoleClient<UserRole>, Prisma__UserRoleClient<UserRoleGetPayload<T>>>

    /**
     * Delete a UserRole.
     * @param {UserRoleDeleteArgs} args - Arguments to delete one UserRole.
     * @example
     * // Delete one UserRole
     * const UserRole = await prisma.userRole.delete({
     *   where: {
     *     // ... filter to delete one UserRole
     *   }
     * })
     * 
    **/
    delete<T extends UserRoleDeleteArgs>(
      args: SelectSubset<T, UserRoleDeleteArgs>
    ): CheckSelect<T, Prisma__UserRoleClient<UserRole>, Prisma__UserRoleClient<UserRoleGetPayload<T>>>

    /**
     * Update one UserRole.
     * @param {UserRoleUpdateArgs} args - Arguments to update one UserRole.
     * @example
     * // Update one UserRole
     * const userRole = await prisma.userRole.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserRoleUpdateArgs>(
      args: SelectSubset<T, UserRoleUpdateArgs>
    ): CheckSelect<T, Prisma__UserRoleClient<UserRole>, Prisma__UserRoleClient<UserRoleGetPayload<T>>>

    /**
     * Delete zero or more UserRoles.
     * @param {UserRoleDeleteManyArgs} args - Arguments to filter UserRoles to delete.
     * @example
     * // Delete a few UserRoles
     * const { count } = await prisma.userRole.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserRoleDeleteManyArgs>(
      args?: SelectSubset<T, UserRoleDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserRoles
     * const userRole = await prisma.userRole.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserRoleUpdateManyArgs>(
      args: SelectSubset<T, UserRoleUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one UserRole.
     * @param {UserRoleUpsertArgs} args - Arguments to update or create a UserRole.
     * @example
     * // Update or create a UserRole
     * const userRole = await prisma.userRole.upsert({
     *   create: {
     *     // ... data to create a UserRole
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserRole we want to update
     *   }
     * })
    **/
    upsert<T extends UserRoleUpsertArgs>(
      args: SelectSubset<T, UserRoleUpsertArgs>
    ): CheckSelect<T, Prisma__UserRoleClient<UserRole>, Prisma__UserRoleClient<UserRoleGetPayload<T>>>

    /**
     * Count the number of UserRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleCountArgs} args - Arguments to filter UserRoles to count.
     * @example
     * // Count the number of UserRoles
     * const count = await prisma.userRole.count({
     *   where: {
     *     // ... the filter for the UserRoles we want to count
     *   }
     * })
    **/
    count<T extends UserRoleCountArgs>(
      args?: Subset<T, UserRoleCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserRoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserRoleAggregateArgs>(args: Subset<T, UserRoleAggregateArgs>): PrismaPromise<GetUserRoleAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for UserRole.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserRoleClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserFindManyArgs = {}>(args?: Subset<T, UserFindManyArgs>): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * UserRole findUnique
   */
  export type UserRoleFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the UserRole
    **/
    select?: UserRoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserRoleInclude | null
    /**
     * Throw an Error if a UserRole can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which UserRole to fetch.
    **/
    where: UserRoleWhereUniqueInput
  }


  /**
   * UserRole findFirst
   */
  export type UserRoleFindFirstArgs = {
    /**
     * Select specific fields to fetch from the UserRole
    **/
    select?: UserRoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserRoleInclude | null
    /**
     * Throw an Error if a UserRole can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which UserRole to fetch.
    **/
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
    **/
    orderBy?: Enumerable<UserRoleOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRoles.
    **/
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRoles.
    **/
    distinct?: Enumerable<UserRoleScalarFieldEnum>
  }


  /**
   * UserRole findMany
   */
  export type UserRoleFindManyArgs = {
    /**
     * Select specific fields to fetch from the UserRole
    **/
    select?: UserRoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserRoleInclude | null
    /**
     * Filter, which UserRoles to fetch.
    **/
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
    **/
    orderBy?: Enumerable<UserRoleOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserRoles.
    **/
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
    **/
    skip?: number
    distinct?: Enumerable<UserRoleScalarFieldEnum>
  }


  /**
   * UserRole create
   */
  export type UserRoleCreateArgs = {
    /**
     * Select specific fields to fetch from the UserRole
    **/
    select?: UserRoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserRoleInclude | null
    /**
     * The data needed to create a UserRole.
    **/
    data: XOR<UserRoleUncheckedCreateInput, UserRoleCreateInput>
  }


  /**
   * UserRole update
   */
  export type UserRoleUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserRole
    **/
    select?: UserRoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserRoleInclude | null
    /**
     * The data needed to update a UserRole.
    **/
    data: XOR<UserRoleUncheckedUpdateInput, UserRoleUpdateInput>
    /**
     * Choose, which UserRole to update.
    **/
    where: UserRoleWhereUniqueInput
  }


  /**
   * UserRole updateMany
   */
  export type UserRoleUpdateManyArgs = {
    data: XOR<UserRoleUncheckedUpdateManyInput, UserRoleUpdateManyMutationInput>
    where?: UserRoleWhereInput
  }


  /**
   * UserRole upsert
   */
  export type UserRoleUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserRole
    **/
    select?: UserRoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserRoleInclude | null
    /**
     * The filter to search for the UserRole to update in case it exists.
    **/
    where: UserRoleWhereUniqueInput
    /**
     * In case the UserRole found by the `where` argument doesn't exist, create a new UserRole with this data.
    **/
    create: XOR<UserRoleUncheckedCreateInput, UserRoleCreateInput>
    /**
     * In case the UserRole was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<UserRoleUncheckedUpdateInput, UserRoleUpdateInput>
  }


  /**
   * UserRole delete
   */
  export type UserRoleDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserRole
    **/
    select?: UserRoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserRoleInclude | null
    /**
     * Filter which UserRole to delete.
    **/
    where: UserRoleWhereUniqueInput
  }


  /**
   * UserRole deleteMany
   */
  export type UserRoleDeleteManyArgs = {
    where?: UserRoleWhereInput
  }


  /**
   * UserRole without action
   */
  export type UserRoleArgs = {
    /**
     * Select specific fields to fetch from the UserRole
    **/
    select?: UserRoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserRoleInclude | null
  }



  /**
   * Model Job
   */


  export type AggregateJob = {
    count: JobCountAggregateOutputType | null
    avg: JobAvgAggregateOutputType | null
    sum: JobSumAggregateOutputType | null
    min: JobMinAggregateOutputType | null
    max: JobMaxAggregateOutputType | null
  }

  export type JobAvgAggregateOutputType = {
    id: number
    userId: number
    categoryId: number
    typeId: number
  }

  export type JobSumAggregateOutputType = {
    id: number
    userId: number
    categoryId: number
    typeId: number
  }

  export type JobMinAggregateOutputType = {
    id: number
    title: string | null
    position: string | null
    companyName: string | null
    companyLogo: string | null
    companyLocation: string | null
    url: string | null
    createdAt: Date | null
    userId: number
    categoryId: number
    typeId: number
  }

  export type JobMaxAggregateOutputType = {
    id: number
    title: string | null
    position: string | null
    companyName: string | null
    companyLogo: string | null
    companyLocation: string | null
    url: string | null
    createdAt: Date | null
    userId: number
    categoryId: number
    typeId: number
  }

  export type JobCountAggregateOutputType = {
    id: number
    title: number | null
    position: number | null
    companyName: number | null
    companyLogo: number | null
    companyLocation: number | null
    url: number | null
    createdAt: number | null
    userId: number
    categoryId: number
    typeId: number
    _all: number
  }


  export type JobAvgAggregateInputType = {
    id?: true
    userId?: true
    categoryId?: true
    typeId?: true
  }

  export type JobSumAggregateInputType = {
    id?: true
    userId?: true
    categoryId?: true
    typeId?: true
  }

  export type JobMinAggregateInputType = {
    id?: true
    title?: true
    position?: true
    companyName?: true
    companyLogo?: true
    companyLocation?: true
    url?: true
    createdAt?: true
    userId?: true
    categoryId?: true
    typeId?: true
  }

  export type JobMaxAggregateInputType = {
    id?: true
    title?: true
    position?: true
    companyName?: true
    companyLogo?: true
    companyLocation?: true
    url?: true
    createdAt?: true
    userId?: true
    categoryId?: true
    typeId?: true
  }

  export type JobCountAggregateInputType = {
    id?: true
    title?: true
    position?: true
    companyName?: true
    companyLogo?: true
    companyLocation?: true
    url?: true
    createdAt?: true
    userId?: true
    categoryId?: true
    typeId?: true
    _all?: true
  }

  export type JobAggregateArgs = {
    /**
     * Filter which Job to aggregate.
    **/
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
    **/
    orderBy?: Enumerable<JobOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Jobs
    **/
    count?: true | JobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: JobAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: JobSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: JobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: JobMaxAggregateInputType
  }

  export type GetJobAggregateType<T extends JobAggregateArgs> = {
    [P in keyof T & keyof AggregateJob]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJob[P]>
      : GetScalarType<T[P], AggregateJob[P]>
  }



  export type JobSelect = {
    id?: boolean
    title?: boolean
    position?: boolean
    companyName?: boolean
    companyLogo?: boolean
    companyLocation?: boolean
    url?: boolean
    createdAt?: boolean
    userId?: boolean
    user?: boolean | UserArgs
    categoryId?: boolean
    category?: boolean | JobCategoryArgs
    typeId?: boolean
    type?: boolean | JobTypeArgs
  }

  export type JobInclude = {
    user?: boolean | UserArgs
    category?: boolean | JobCategoryArgs
    type?: boolean | JobTypeArgs
  }

  export type JobGetPayload<
    S extends boolean | null | undefined | JobArgs,
    U = keyof S
      > = S extends true
        ? Job
    : S extends undefined
    ? never
    : S extends JobArgs | JobFindManyArgs
    ?'include' extends U
    ? Job  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user'
        ? UserGetPayload<S['include'][P]> :
        P extends 'category'
        ? JobCategoryGetPayload<S['include'][P]> :
        P extends 'type'
        ? JobTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Job ?Job [P]
  : 
          P extends 'user'
        ? UserGetPayload<S['select'][P]> :
        P extends 'category'
        ? JobCategoryGetPayload<S['select'][P]> :
        P extends 'type'
        ? JobTypeGetPayload<S['select'][P]> : never
  } 
    : Job
  : Job


  type JobCountArgs = Merge<
    Omit<JobFindManyArgs, 'select' | 'include'> & {
      select?: JobCountAggregateInputType | true
    }
  >

  export interface JobDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Job that matches the filter.
     * @param {JobFindUniqueArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends JobFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, JobFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Job'> extends True ? CheckSelect<T, Prisma__JobClient<Job>, Prisma__JobClient<JobGetPayload<T>>> : CheckSelect<T, Prisma__JobClient<Job | null >, Prisma__JobClient<JobGetPayload<T> | null >>

    /**
     * Find the first Job that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindFirstArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends JobFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, JobFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Job'> extends True ? CheckSelect<T, Prisma__JobClient<Job>, Prisma__JobClient<JobGetPayload<T>>> : CheckSelect<T, Prisma__JobClient<Job | null >, Prisma__JobClient<JobGetPayload<T> | null >>

    /**
     * Find zero or more Jobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jobs
     * const jobs = await prisma.job.findMany()
     * 
     * // Get first 10 Jobs
     * const jobs = await prisma.job.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobWithIdOnly = await prisma.job.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends JobFindManyArgs>(
      args?: SelectSubset<T, JobFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Job>>, PrismaPromise<Array<JobGetPayload<T>>>>

    /**
     * Create a Job.
     * @param {JobCreateArgs} args - Arguments to create a Job.
     * @example
     * // Create one Job
     * const Job = await prisma.job.create({
     *   data: {
     *     // ... data to create a Job
     *   }
     * })
     * 
    **/
    create<T extends JobCreateArgs>(
      args: SelectSubset<T, JobCreateArgs>
    ): CheckSelect<T, Prisma__JobClient<Job>, Prisma__JobClient<JobGetPayload<T>>>

    /**
     * Delete a Job.
     * @param {JobDeleteArgs} args - Arguments to delete one Job.
     * @example
     * // Delete one Job
     * const Job = await prisma.job.delete({
     *   where: {
     *     // ... filter to delete one Job
     *   }
     * })
     * 
    **/
    delete<T extends JobDeleteArgs>(
      args: SelectSubset<T, JobDeleteArgs>
    ): CheckSelect<T, Prisma__JobClient<Job>, Prisma__JobClient<JobGetPayload<T>>>

    /**
     * Update one Job.
     * @param {JobUpdateArgs} args - Arguments to update one Job.
     * @example
     * // Update one Job
     * const job = await prisma.job.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends JobUpdateArgs>(
      args: SelectSubset<T, JobUpdateArgs>
    ): CheckSelect<T, Prisma__JobClient<Job>, Prisma__JobClient<JobGetPayload<T>>>

    /**
     * Delete zero or more Jobs.
     * @param {JobDeleteManyArgs} args - Arguments to filter Jobs to delete.
     * @example
     * // Delete a few Jobs
     * const { count } = await prisma.job.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends JobDeleteManyArgs>(
      args?: SelectSubset<T, JobDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jobs
     * const job = await prisma.job.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends JobUpdateManyArgs>(
      args: SelectSubset<T, JobUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Job.
     * @param {JobUpsertArgs} args - Arguments to update or create a Job.
     * @example
     * // Update or create a Job
     * const job = await prisma.job.upsert({
     *   create: {
     *     // ... data to create a Job
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Job we want to update
     *   }
     * })
    **/
    upsert<T extends JobUpsertArgs>(
      args: SelectSubset<T, JobUpsertArgs>
    ): CheckSelect<T, Prisma__JobClient<Job>, Prisma__JobClient<JobGetPayload<T>>>

    /**
     * Count the number of Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobCountArgs} args - Arguments to filter Jobs to count.
     * @example
     * // Count the number of Jobs
     * const count = await prisma.job.count({
     *   where: {
     *     // ... the filter for the Jobs we want to count
     *   }
     * })
    **/
    count<T extends JobCountArgs>(
      args?: Subset<T, JobCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Job.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobAggregateArgs>(args: Subset<T, JobAggregateArgs>): PrismaPromise<GetJobAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Job.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__JobClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    category<T extends JobCategoryArgs = {}>(args?: Subset<T, JobCategoryArgs>): CheckSelect<T, Prisma__JobCategoryClient<JobCategory | null >, Prisma__JobCategoryClient<JobCategoryGetPayload<T> | null >>;

    type<T extends JobTypeArgs = {}>(args?: Subset<T, JobTypeArgs>): CheckSelect<T, Prisma__JobTypeClient<JobType | null >, Prisma__JobTypeClient<JobTypeGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Job findUnique
   */
  export type JobFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Job
    **/
    select?: JobSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: JobInclude | null
    /**
     * Throw an Error if a Job can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Job to fetch.
    **/
    where: JobWhereUniqueInput
  }


  /**
   * Job findFirst
   */
  export type JobFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Job
    **/
    select?: JobSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: JobInclude | null
    /**
     * Throw an Error if a Job can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Job to fetch.
    **/
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
    **/
    orderBy?: Enumerable<JobOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jobs.
    **/
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jobs.
    **/
    distinct?: Enumerable<JobScalarFieldEnum>
  }


  /**
   * Job findMany
   */
  export type JobFindManyArgs = {
    /**
     * Select specific fields to fetch from the Job
    **/
    select?: JobSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: JobInclude | null
    /**
     * Filter, which Jobs to fetch.
    **/
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
    **/
    orderBy?: Enumerable<JobOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Jobs.
    **/
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
    **/
    skip?: number
    distinct?: Enumerable<JobScalarFieldEnum>
  }


  /**
   * Job create
   */
  export type JobCreateArgs = {
    /**
     * Select specific fields to fetch from the Job
    **/
    select?: JobSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: JobInclude | null
    /**
     * The data needed to create a Job.
    **/
    data: XOR<JobUncheckedCreateInput, JobCreateInput>
  }


  /**
   * Job update
   */
  export type JobUpdateArgs = {
    /**
     * Select specific fields to fetch from the Job
    **/
    select?: JobSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: JobInclude | null
    /**
     * The data needed to update a Job.
    **/
    data: XOR<JobUncheckedUpdateInput, JobUpdateInput>
    /**
     * Choose, which Job to update.
    **/
    where: JobWhereUniqueInput
  }


  /**
   * Job updateMany
   */
  export type JobUpdateManyArgs = {
    data: XOR<JobUncheckedUpdateManyInput, JobUpdateManyMutationInput>
    where?: JobWhereInput
  }


  /**
   * Job upsert
   */
  export type JobUpsertArgs = {
    /**
     * Select specific fields to fetch from the Job
    **/
    select?: JobSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: JobInclude | null
    /**
     * The filter to search for the Job to update in case it exists.
    **/
    where: JobWhereUniqueInput
    /**
     * In case the Job found by the `where` argument doesn't exist, create a new Job with this data.
    **/
    create: XOR<JobUncheckedCreateInput, JobCreateInput>
    /**
     * In case the Job was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<JobUncheckedUpdateInput, JobUpdateInput>
  }


  /**
   * Job delete
   */
  export type JobDeleteArgs = {
    /**
     * Select specific fields to fetch from the Job
    **/
    select?: JobSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: JobInclude | null
    /**
     * Filter which Job to delete.
    **/
    where: JobWhereUniqueInput
  }


  /**
   * Job deleteMany
   */
  export type JobDeleteManyArgs = {
    where?: JobWhereInput
  }


  /**
   * Job without action
   */
  export type JobArgs = {
    /**
     * Select specific fields to fetch from the Job
    **/
    select?: JobSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: JobInclude | null
  }



  /**
   * Model JobCategory
   */


  export type AggregateJobCategory = {
    count: JobCategoryCountAggregateOutputType | null
    avg: JobCategoryAvgAggregateOutputType | null
    sum: JobCategorySumAggregateOutputType | null
    min: JobCategoryMinAggregateOutputType | null
    max: JobCategoryMaxAggregateOutputType | null
  }

  export type JobCategoryAvgAggregateOutputType = {
    id: number
  }

  export type JobCategorySumAggregateOutputType = {
    id: number
  }

  export type JobCategoryMinAggregateOutputType = {
    id: number
    name: string | null
  }

  export type JobCategoryMaxAggregateOutputType = {
    id: number
    name: string | null
  }

  export type JobCategoryCountAggregateOutputType = {
    id: number
    name: number | null
    _all: number
  }


  export type JobCategoryAvgAggregateInputType = {
    id?: true
  }

  export type JobCategorySumAggregateInputType = {
    id?: true
  }

  export type JobCategoryMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type JobCategoryMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type JobCategoryCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type JobCategoryAggregateArgs = {
    /**
     * Filter which JobCategory to aggregate.
    **/
    where?: JobCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobCategories to fetch.
    **/
    orderBy?: Enumerable<JobCategoryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: JobCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobCategories from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobCategories.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JobCategories
    **/
    count?: true | JobCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: JobCategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: JobCategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: JobCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: JobCategoryMaxAggregateInputType
  }

  export type GetJobCategoryAggregateType<T extends JobCategoryAggregateArgs> = {
    [P in keyof T & keyof AggregateJobCategory]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJobCategory[P]>
      : GetScalarType<T[P], AggregateJobCategory[P]>
  }



  export type JobCategorySelect = {
    id?: boolean
    name?: boolean
    Job?: boolean | JobFindManyArgs
  }

  export type JobCategoryInclude = {
    Job?: boolean | JobFindManyArgs
  }

  export type JobCategoryGetPayload<
    S extends boolean | null | undefined | JobCategoryArgs,
    U = keyof S
      > = S extends true
        ? JobCategory
    : S extends undefined
    ? never
    : S extends JobCategoryArgs | JobCategoryFindManyArgs
    ?'include' extends U
    ? JobCategory  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Job'
        ? Array < JobGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof JobCategory ?JobCategory [P]
  : 
          P extends 'Job'
        ? Array < JobGetPayload<S['select'][P]>>  : never
  } 
    : JobCategory
  : JobCategory


  type JobCategoryCountArgs = Merge<
    Omit<JobCategoryFindManyArgs, 'select' | 'include'> & {
      select?: JobCategoryCountAggregateInputType | true
    }
  >

  export interface JobCategoryDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one JobCategory that matches the filter.
     * @param {JobCategoryFindUniqueArgs} args - Arguments to find a JobCategory
     * @example
     * // Get one JobCategory
     * const jobCategory = await prisma.jobCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends JobCategoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, JobCategoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'JobCategory'> extends True ? CheckSelect<T, Prisma__JobCategoryClient<JobCategory>, Prisma__JobCategoryClient<JobCategoryGetPayload<T>>> : CheckSelect<T, Prisma__JobCategoryClient<JobCategory | null >, Prisma__JobCategoryClient<JobCategoryGetPayload<T> | null >>

    /**
     * Find the first JobCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobCategoryFindFirstArgs} args - Arguments to find a JobCategory
     * @example
     * // Get one JobCategory
     * const jobCategory = await prisma.jobCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends JobCategoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, JobCategoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'JobCategory'> extends True ? CheckSelect<T, Prisma__JobCategoryClient<JobCategory>, Prisma__JobCategoryClient<JobCategoryGetPayload<T>>> : CheckSelect<T, Prisma__JobCategoryClient<JobCategory | null >, Prisma__JobCategoryClient<JobCategoryGetPayload<T> | null >>

    /**
     * Find zero or more JobCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobCategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JobCategories
     * const jobCategories = await prisma.jobCategory.findMany()
     * 
     * // Get first 10 JobCategories
     * const jobCategories = await prisma.jobCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobCategoryWithIdOnly = await prisma.jobCategory.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends JobCategoryFindManyArgs>(
      args?: SelectSubset<T, JobCategoryFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<JobCategory>>, PrismaPromise<Array<JobCategoryGetPayload<T>>>>

    /**
     * Create a JobCategory.
     * @param {JobCategoryCreateArgs} args - Arguments to create a JobCategory.
     * @example
     * // Create one JobCategory
     * const JobCategory = await prisma.jobCategory.create({
     *   data: {
     *     // ... data to create a JobCategory
     *   }
     * })
     * 
    **/
    create<T extends JobCategoryCreateArgs>(
      args: SelectSubset<T, JobCategoryCreateArgs>
    ): CheckSelect<T, Prisma__JobCategoryClient<JobCategory>, Prisma__JobCategoryClient<JobCategoryGetPayload<T>>>

    /**
     * Delete a JobCategory.
     * @param {JobCategoryDeleteArgs} args - Arguments to delete one JobCategory.
     * @example
     * // Delete one JobCategory
     * const JobCategory = await prisma.jobCategory.delete({
     *   where: {
     *     // ... filter to delete one JobCategory
     *   }
     * })
     * 
    **/
    delete<T extends JobCategoryDeleteArgs>(
      args: SelectSubset<T, JobCategoryDeleteArgs>
    ): CheckSelect<T, Prisma__JobCategoryClient<JobCategory>, Prisma__JobCategoryClient<JobCategoryGetPayload<T>>>

    /**
     * Update one JobCategory.
     * @param {JobCategoryUpdateArgs} args - Arguments to update one JobCategory.
     * @example
     * // Update one JobCategory
     * const jobCategory = await prisma.jobCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends JobCategoryUpdateArgs>(
      args: SelectSubset<T, JobCategoryUpdateArgs>
    ): CheckSelect<T, Prisma__JobCategoryClient<JobCategory>, Prisma__JobCategoryClient<JobCategoryGetPayload<T>>>

    /**
     * Delete zero or more JobCategories.
     * @param {JobCategoryDeleteManyArgs} args - Arguments to filter JobCategories to delete.
     * @example
     * // Delete a few JobCategories
     * const { count } = await prisma.jobCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends JobCategoryDeleteManyArgs>(
      args?: SelectSubset<T, JobCategoryDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JobCategories
     * const jobCategory = await prisma.jobCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends JobCategoryUpdateManyArgs>(
      args: SelectSubset<T, JobCategoryUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one JobCategory.
     * @param {JobCategoryUpsertArgs} args - Arguments to update or create a JobCategory.
     * @example
     * // Update or create a JobCategory
     * const jobCategory = await prisma.jobCategory.upsert({
     *   create: {
     *     // ... data to create a JobCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JobCategory we want to update
     *   }
     * })
    **/
    upsert<T extends JobCategoryUpsertArgs>(
      args: SelectSubset<T, JobCategoryUpsertArgs>
    ): CheckSelect<T, Prisma__JobCategoryClient<JobCategory>, Prisma__JobCategoryClient<JobCategoryGetPayload<T>>>

    /**
     * Count the number of JobCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobCategoryCountArgs} args - Arguments to filter JobCategories to count.
     * @example
     * // Count the number of JobCategories
     * const count = await prisma.jobCategory.count({
     *   where: {
     *     // ... the filter for the JobCategories we want to count
     *   }
     * })
    **/
    count<T extends JobCategoryCountArgs>(
      args?: Subset<T, JobCategoryCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JobCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobCategoryAggregateArgs>(args: Subset<T, JobCategoryAggregateArgs>): PrismaPromise<GetJobCategoryAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for JobCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__JobCategoryClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Job<T extends JobFindManyArgs = {}>(args?: Subset<T, JobFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Job>>, PrismaPromise<Array<JobGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * JobCategory findUnique
   */
  export type JobCategoryFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the JobCategory
    **/
    select?: JobCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: JobCategoryInclude | null
    /**
     * Throw an Error if a JobCategory can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which JobCategory to fetch.
    **/
    where: JobCategoryWhereUniqueInput
  }


  /**
   * JobCategory findFirst
   */
  export type JobCategoryFindFirstArgs = {
    /**
     * Select specific fields to fetch from the JobCategory
    **/
    select?: JobCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: JobCategoryInclude | null
    /**
     * Throw an Error if a JobCategory can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which JobCategory to fetch.
    **/
    where?: JobCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobCategories to fetch.
    **/
    orderBy?: Enumerable<JobCategoryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobCategories.
    **/
    cursor?: JobCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobCategories from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobCategories.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobCategories.
    **/
    distinct?: Enumerable<JobCategoryScalarFieldEnum>
  }


  /**
   * JobCategory findMany
   */
  export type JobCategoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the JobCategory
    **/
    select?: JobCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: JobCategoryInclude | null
    /**
     * Filter, which JobCategories to fetch.
    **/
    where?: JobCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobCategories to fetch.
    **/
    orderBy?: Enumerable<JobCategoryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JobCategories.
    **/
    cursor?: JobCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobCategories from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobCategories.
    **/
    skip?: number
    distinct?: Enumerable<JobCategoryScalarFieldEnum>
  }


  /**
   * JobCategory create
   */
  export type JobCategoryCreateArgs = {
    /**
     * Select specific fields to fetch from the JobCategory
    **/
    select?: JobCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: JobCategoryInclude | null
    /**
     * The data needed to create a JobCategory.
    **/
    data: XOR<JobCategoryUncheckedCreateInput, JobCategoryCreateInput>
  }


  /**
   * JobCategory update
   */
  export type JobCategoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the JobCategory
    **/
    select?: JobCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: JobCategoryInclude | null
    /**
     * The data needed to update a JobCategory.
    **/
    data: XOR<JobCategoryUncheckedUpdateInput, JobCategoryUpdateInput>
    /**
     * Choose, which JobCategory to update.
    **/
    where: JobCategoryWhereUniqueInput
  }


  /**
   * JobCategory updateMany
   */
  export type JobCategoryUpdateManyArgs = {
    data: XOR<JobCategoryUncheckedUpdateManyInput, JobCategoryUpdateManyMutationInput>
    where?: JobCategoryWhereInput
  }


  /**
   * JobCategory upsert
   */
  export type JobCategoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the JobCategory
    **/
    select?: JobCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: JobCategoryInclude | null
    /**
     * The filter to search for the JobCategory to update in case it exists.
    **/
    where: JobCategoryWhereUniqueInput
    /**
     * In case the JobCategory found by the `where` argument doesn't exist, create a new JobCategory with this data.
    **/
    create: XOR<JobCategoryUncheckedCreateInput, JobCategoryCreateInput>
    /**
     * In case the JobCategory was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<JobCategoryUncheckedUpdateInput, JobCategoryUpdateInput>
  }


  /**
   * JobCategory delete
   */
  export type JobCategoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the JobCategory
    **/
    select?: JobCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: JobCategoryInclude | null
    /**
     * Filter which JobCategory to delete.
    **/
    where: JobCategoryWhereUniqueInput
  }


  /**
   * JobCategory deleteMany
   */
  export type JobCategoryDeleteManyArgs = {
    where?: JobCategoryWhereInput
  }


  /**
   * JobCategory without action
   */
  export type JobCategoryArgs = {
    /**
     * Select specific fields to fetch from the JobCategory
    **/
    select?: JobCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: JobCategoryInclude | null
  }



  /**
   * Model JobType
   */


  export type AggregateJobType = {
    count: JobTypeCountAggregateOutputType | null
    avg: JobTypeAvgAggregateOutputType | null
    sum: JobTypeSumAggregateOutputType | null
    min: JobTypeMinAggregateOutputType | null
    max: JobTypeMaxAggregateOutputType | null
  }

  export type JobTypeAvgAggregateOutputType = {
    id: number
  }

  export type JobTypeSumAggregateOutputType = {
    id: number
  }

  export type JobTypeMinAggregateOutputType = {
    id: number
    name: string | null
  }

  export type JobTypeMaxAggregateOutputType = {
    id: number
    name: string | null
  }

  export type JobTypeCountAggregateOutputType = {
    id: number
    name: number | null
    _all: number
  }


  export type JobTypeAvgAggregateInputType = {
    id?: true
  }

  export type JobTypeSumAggregateInputType = {
    id?: true
  }

  export type JobTypeMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type JobTypeMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type JobTypeCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type JobTypeAggregateArgs = {
    /**
     * Filter which JobType to aggregate.
    **/
    where?: JobTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobTypes to fetch.
    **/
    orderBy?: Enumerable<JobTypeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: JobTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobTypes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobTypes.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JobTypes
    **/
    count?: true | JobTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: JobTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: JobTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: JobTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: JobTypeMaxAggregateInputType
  }

  export type GetJobTypeAggregateType<T extends JobTypeAggregateArgs> = {
    [P in keyof T & keyof AggregateJobType]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJobType[P]>
      : GetScalarType<T[P], AggregateJobType[P]>
  }



  export type JobTypeSelect = {
    id?: boolean
    name?: boolean
    Job?: boolean | JobFindManyArgs
  }

  export type JobTypeInclude = {
    Job?: boolean | JobFindManyArgs
  }

  export type JobTypeGetPayload<
    S extends boolean | null | undefined | JobTypeArgs,
    U = keyof S
      > = S extends true
        ? JobType
    : S extends undefined
    ? never
    : S extends JobTypeArgs | JobTypeFindManyArgs
    ?'include' extends U
    ? JobType  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Job'
        ? Array < JobGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof JobType ?JobType [P]
  : 
          P extends 'Job'
        ? Array < JobGetPayload<S['select'][P]>>  : never
  } 
    : JobType
  : JobType


  type JobTypeCountArgs = Merge<
    Omit<JobTypeFindManyArgs, 'select' | 'include'> & {
      select?: JobTypeCountAggregateInputType | true
    }
  >

  export interface JobTypeDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one JobType that matches the filter.
     * @param {JobTypeFindUniqueArgs} args - Arguments to find a JobType
     * @example
     * // Get one JobType
     * const jobType = await prisma.jobType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends JobTypeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, JobTypeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'JobType'> extends True ? CheckSelect<T, Prisma__JobTypeClient<JobType>, Prisma__JobTypeClient<JobTypeGetPayload<T>>> : CheckSelect<T, Prisma__JobTypeClient<JobType | null >, Prisma__JobTypeClient<JobTypeGetPayload<T> | null >>

    /**
     * Find the first JobType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobTypeFindFirstArgs} args - Arguments to find a JobType
     * @example
     * // Get one JobType
     * const jobType = await prisma.jobType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends JobTypeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, JobTypeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'JobType'> extends True ? CheckSelect<T, Prisma__JobTypeClient<JobType>, Prisma__JobTypeClient<JobTypeGetPayload<T>>> : CheckSelect<T, Prisma__JobTypeClient<JobType | null >, Prisma__JobTypeClient<JobTypeGetPayload<T> | null >>

    /**
     * Find zero or more JobTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobTypeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JobTypes
     * const jobTypes = await prisma.jobType.findMany()
     * 
     * // Get first 10 JobTypes
     * const jobTypes = await prisma.jobType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobTypeWithIdOnly = await prisma.jobType.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends JobTypeFindManyArgs>(
      args?: SelectSubset<T, JobTypeFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<JobType>>, PrismaPromise<Array<JobTypeGetPayload<T>>>>

    /**
     * Create a JobType.
     * @param {JobTypeCreateArgs} args - Arguments to create a JobType.
     * @example
     * // Create one JobType
     * const JobType = await prisma.jobType.create({
     *   data: {
     *     // ... data to create a JobType
     *   }
     * })
     * 
    **/
    create<T extends JobTypeCreateArgs>(
      args: SelectSubset<T, JobTypeCreateArgs>
    ): CheckSelect<T, Prisma__JobTypeClient<JobType>, Prisma__JobTypeClient<JobTypeGetPayload<T>>>

    /**
     * Delete a JobType.
     * @param {JobTypeDeleteArgs} args - Arguments to delete one JobType.
     * @example
     * // Delete one JobType
     * const JobType = await prisma.jobType.delete({
     *   where: {
     *     // ... filter to delete one JobType
     *   }
     * })
     * 
    **/
    delete<T extends JobTypeDeleteArgs>(
      args: SelectSubset<T, JobTypeDeleteArgs>
    ): CheckSelect<T, Prisma__JobTypeClient<JobType>, Prisma__JobTypeClient<JobTypeGetPayload<T>>>

    /**
     * Update one JobType.
     * @param {JobTypeUpdateArgs} args - Arguments to update one JobType.
     * @example
     * // Update one JobType
     * const jobType = await prisma.jobType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends JobTypeUpdateArgs>(
      args: SelectSubset<T, JobTypeUpdateArgs>
    ): CheckSelect<T, Prisma__JobTypeClient<JobType>, Prisma__JobTypeClient<JobTypeGetPayload<T>>>

    /**
     * Delete zero or more JobTypes.
     * @param {JobTypeDeleteManyArgs} args - Arguments to filter JobTypes to delete.
     * @example
     * // Delete a few JobTypes
     * const { count } = await prisma.jobType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends JobTypeDeleteManyArgs>(
      args?: SelectSubset<T, JobTypeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JobTypes
     * const jobType = await prisma.jobType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends JobTypeUpdateManyArgs>(
      args: SelectSubset<T, JobTypeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one JobType.
     * @param {JobTypeUpsertArgs} args - Arguments to update or create a JobType.
     * @example
     * // Update or create a JobType
     * const jobType = await prisma.jobType.upsert({
     *   create: {
     *     // ... data to create a JobType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JobType we want to update
     *   }
     * })
    **/
    upsert<T extends JobTypeUpsertArgs>(
      args: SelectSubset<T, JobTypeUpsertArgs>
    ): CheckSelect<T, Prisma__JobTypeClient<JobType>, Prisma__JobTypeClient<JobTypeGetPayload<T>>>

    /**
     * Count the number of JobTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobTypeCountArgs} args - Arguments to filter JobTypes to count.
     * @example
     * // Count the number of JobTypes
     * const count = await prisma.jobType.count({
     *   where: {
     *     // ... the filter for the JobTypes we want to count
     *   }
     * })
    **/
    count<T extends JobTypeCountArgs>(
      args?: Subset<T, JobTypeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JobType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobTypeAggregateArgs>(args: Subset<T, JobTypeAggregateArgs>): PrismaPromise<GetJobTypeAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for JobType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__JobTypeClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Job<T extends JobFindManyArgs = {}>(args?: Subset<T, JobFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Job>>, PrismaPromise<Array<JobGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * JobType findUnique
   */
  export type JobTypeFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the JobType
    **/
    select?: JobTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: JobTypeInclude | null
    /**
     * Throw an Error if a JobType can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which JobType to fetch.
    **/
    where: JobTypeWhereUniqueInput
  }


  /**
   * JobType findFirst
   */
  export type JobTypeFindFirstArgs = {
    /**
     * Select specific fields to fetch from the JobType
    **/
    select?: JobTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: JobTypeInclude | null
    /**
     * Throw an Error if a JobType can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which JobType to fetch.
    **/
    where?: JobTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobTypes to fetch.
    **/
    orderBy?: Enumerable<JobTypeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobTypes.
    **/
    cursor?: JobTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobTypes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobTypes.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobTypes.
    **/
    distinct?: Enumerable<JobTypeScalarFieldEnum>
  }


  /**
   * JobType findMany
   */
  export type JobTypeFindManyArgs = {
    /**
     * Select specific fields to fetch from the JobType
    **/
    select?: JobTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: JobTypeInclude | null
    /**
     * Filter, which JobTypes to fetch.
    **/
    where?: JobTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobTypes to fetch.
    **/
    orderBy?: Enumerable<JobTypeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JobTypes.
    **/
    cursor?: JobTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobTypes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobTypes.
    **/
    skip?: number
    distinct?: Enumerable<JobTypeScalarFieldEnum>
  }


  /**
   * JobType create
   */
  export type JobTypeCreateArgs = {
    /**
     * Select specific fields to fetch from the JobType
    **/
    select?: JobTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: JobTypeInclude | null
    /**
     * The data needed to create a JobType.
    **/
    data: XOR<JobTypeUncheckedCreateInput, JobTypeCreateInput>
  }


  /**
   * JobType update
   */
  export type JobTypeUpdateArgs = {
    /**
     * Select specific fields to fetch from the JobType
    **/
    select?: JobTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: JobTypeInclude | null
    /**
     * The data needed to update a JobType.
    **/
    data: XOR<JobTypeUncheckedUpdateInput, JobTypeUpdateInput>
    /**
     * Choose, which JobType to update.
    **/
    where: JobTypeWhereUniqueInput
  }


  /**
   * JobType updateMany
   */
  export type JobTypeUpdateManyArgs = {
    data: XOR<JobTypeUncheckedUpdateManyInput, JobTypeUpdateManyMutationInput>
    where?: JobTypeWhereInput
  }


  /**
   * JobType upsert
   */
  export type JobTypeUpsertArgs = {
    /**
     * Select specific fields to fetch from the JobType
    **/
    select?: JobTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: JobTypeInclude | null
    /**
     * The filter to search for the JobType to update in case it exists.
    **/
    where: JobTypeWhereUniqueInput
    /**
     * In case the JobType found by the `where` argument doesn't exist, create a new JobType with this data.
    **/
    create: XOR<JobTypeUncheckedCreateInput, JobTypeCreateInput>
    /**
     * In case the JobType was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<JobTypeUncheckedUpdateInput, JobTypeUpdateInput>
  }


  /**
   * JobType delete
   */
  export type JobTypeDeleteArgs = {
    /**
     * Select specific fields to fetch from the JobType
    **/
    select?: JobTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: JobTypeInclude | null
    /**
     * Filter which JobType to delete.
    **/
    where: JobTypeWhereUniqueInput
  }


  /**
   * JobType deleteMany
   */
  export type JobTypeDeleteManyArgs = {
    where?: JobTypeWhereInput
  }


  /**
   * JobType without action
   */
  export type JobTypeArgs = {
    /**
     * Select specific fields to fetch from the JobType
    **/
    select?: JobTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: JobTypeInclude | null
  }



  /**
   * Model Setting
   */


  export type AggregateSetting = {
    count: SettingCountAggregateOutputType | null
    min: SettingMinAggregateOutputType | null
    max: SettingMaxAggregateOutputType | null
  }

  export type SettingMinAggregateOutputType = {
    name: string | null
    value: string | null
  }

  export type SettingMaxAggregateOutputType = {
    name: string | null
    value: string | null
  }

  export type SettingCountAggregateOutputType = {
    name: number | null
    value: number | null
    _all: number
  }


  export type SettingMinAggregateInputType = {
    name?: true
    value?: true
  }

  export type SettingMaxAggregateInputType = {
    name?: true
    value?: true
  }

  export type SettingCountAggregateInputType = {
    name?: true
    value?: true
    _all?: true
  }

  export type SettingAggregateArgs = {
    /**
     * Filter which Setting to aggregate.
    **/
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
    **/
    orderBy?: Enumerable<SettingOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Settings
    **/
    count?: true | SettingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: SettingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: SettingMaxAggregateInputType
  }

  export type GetSettingAggregateType<T extends SettingAggregateArgs> = {
    [P in keyof T & keyof AggregateSetting]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSetting[P]>
      : GetScalarType<T[P], AggregateSetting[P]>
  }



  export type SettingSelect = {
    name?: boolean
    value?: boolean
  }

  export type SettingGetPayload<
    S extends boolean | null | undefined | SettingArgs,
    U = keyof S
      > = S extends true
        ? Setting
    : S extends undefined
    ? never
    : S extends SettingArgs | SettingFindManyArgs
    ?'include' extends U
    ? Setting 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Setting ?Setting [P]
  : 
     never
  } 
    : Setting
  : Setting


  type SettingCountArgs = Merge<
    Omit<SettingFindManyArgs, 'select' | 'include'> & {
      select?: SettingCountAggregateInputType | true
    }
  >

  export interface SettingDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Setting that matches the filter.
     * @param {SettingFindUniqueArgs} args - Arguments to find a Setting
     * @example
     * // Get one Setting
     * const setting = await prisma.setting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SettingFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SettingFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Setting'> extends True ? CheckSelect<T, Prisma__SettingClient<Setting>, Prisma__SettingClient<SettingGetPayload<T>>> : CheckSelect<T, Prisma__SettingClient<Setting | null >, Prisma__SettingClient<SettingGetPayload<T> | null >>

    /**
     * Find the first Setting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingFindFirstArgs} args - Arguments to find a Setting
     * @example
     * // Get one Setting
     * const setting = await prisma.setting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SettingFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SettingFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Setting'> extends True ? CheckSelect<T, Prisma__SettingClient<Setting>, Prisma__SettingClient<SettingGetPayload<T>>> : CheckSelect<T, Prisma__SettingClient<Setting | null >, Prisma__SettingClient<SettingGetPayload<T> | null >>

    /**
     * Find zero or more Settings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Settings
     * const settings = await prisma.setting.findMany()
     * 
     * // Get first 10 Settings
     * const settings = await prisma.setting.findMany({ take: 10 })
     * 
     * // Only select the `name`
     * const settingWithNameOnly = await prisma.setting.findMany({ select: { name: true } })
     * 
    **/
    findMany<T extends SettingFindManyArgs>(
      args?: SelectSubset<T, SettingFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Setting>>, PrismaPromise<Array<SettingGetPayload<T>>>>

    /**
     * Create a Setting.
     * @param {SettingCreateArgs} args - Arguments to create a Setting.
     * @example
     * // Create one Setting
     * const Setting = await prisma.setting.create({
     *   data: {
     *     // ... data to create a Setting
     *   }
     * })
     * 
    **/
    create<T extends SettingCreateArgs>(
      args: SelectSubset<T, SettingCreateArgs>
    ): CheckSelect<T, Prisma__SettingClient<Setting>, Prisma__SettingClient<SettingGetPayload<T>>>

    /**
     * Delete a Setting.
     * @param {SettingDeleteArgs} args - Arguments to delete one Setting.
     * @example
     * // Delete one Setting
     * const Setting = await prisma.setting.delete({
     *   where: {
     *     // ... filter to delete one Setting
     *   }
     * })
     * 
    **/
    delete<T extends SettingDeleteArgs>(
      args: SelectSubset<T, SettingDeleteArgs>
    ): CheckSelect<T, Prisma__SettingClient<Setting>, Prisma__SettingClient<SettingGetPayload<T>>>

    /**
     * Update one Setting.
     * @param {SettingUpdateArgs} args - Arguments to update one Setting.
     * @example
     * // Update one Setting
     * const setting = await prisma.setting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SettingUpdateArgs>(
      args: SelectSubset<T, SettingUpdateArgs>
    ): CheckSelect<T, Prisma__SettingClient<Setting>, Prisma__SettingClient<SettingGetPayload<T>>>

    /**
     * Delete zero or more Settings.
     * @param {SettingDeleteManyArgs} args - Arguments to filter Settings to delete.
     * @example
     * // Delete a few Settings
     * const { count } = await prisma.setting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SettingDeleteManyArgs>(
      args?: SelectSubset<T, SettingDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Settings
     * const setting = await prisma.setting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SettingUpdateManyArgs>(
      args: SelectSubset<T, SettingUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Setting.
     * @param {SettingUpsertArgs} args - Arguments to update or create a Setting.
     * @example
     * // Update or create a Setting
     * const setting = await prisma.setting.upsert({
     *   create: {
     *     // ... data to create a Setting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Setting we want to update
     *   }
     * })
    **/
    upsert<T extends SettingUpsertArgs>(
      args: SelectSubset<T, SettingUpsertArgs>
    ): CheckSelect<T, Prisma__SettingClient<Setting>, Prisma__SettingClient<SettingGetPayload<T>>>

    /**
     * Count the number of Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingCountArgs} args - Arguments to filter Settings to count.
     * @example
     * // Count the number of Settings
     * const count = await prisma.setting.count({
     *   where: {
     *     // ... the filter for the Settings we want to count
     *   }
     * })
    **/
    count<T extends SettingCountArgs>(
      args?: Subset<T, SettingCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SettingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Setting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SettingAggregateArgs>(args: Subset<T, SettingAggregateArgs>): PrismaPromise<GetSettingAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Setting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SettingClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Setting findUnique
   */
  export type SettingFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Setting
    **/
    select?: SettingSelect | null
    /**
     * Throw an Error if a Setting can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Setting to fetch.
    **/
    where: SettingWhereUniqueInput
  }


  /**
   * Setting findFirst
   */
  export type SettingFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Setting
    **/
    select?: SettingSelect | null
    /**
     * Throw an Error if a Setting can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Setting to fetch.
    **/
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
    **/
    orderBy?: Enumerable<SettingOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Settings.
    **/
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Settings.
    **/
    distinct?: Enumerable<SettingScalarFieldEnum>
  }


  /**
   * Setting findMany
   */
  export type SettingFindManyArgs = {
    /**
     * Select specific fields to fetch from the Setting
    **/
    select?: SettingSelect | null
    /**
     * Filter, which Settings to fetch.
    **/
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
    **/
    orderBy?: Enumerable<SettingOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Settings.
    **/
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
    **/
    skip?: number
    distinct?: Enumerable<SettingScalarFieldEnum>
  }


  /**
   * Setting create
   */
  export type SettingCreateArgs = {
    /**
     * Select specific fields to fetch from the Setting
    **/
    select?: SettingSelect | null
    /**
     * The data needed to create a Setting.
    **/
    data: XOR<SettingUncheckedCreateInput, SettingCreateInput>
  }


  /**
   * Setting update
   */
  export type SettingUpdateArgs = {
    /**
     * Select specific fields to fetch from the Setting
    **/
    select?: SettingSelect | null
    /**
     * The data needed to update a Setting.
    **/
    data: XOR<SettingUncheckedUpdateInput, SettingUpdateInput>
    /**
     * Choose, which Setting to update.
    **/
    where: SettingWhereUniqueInput
  }


  /**
   * Setting updateMany
   */
  export type SettingUpdateManyArgs = {
    data: XOR<SettingUncheckedUpdateManyInput, SettingUpdateManyMutationInput>
    where?: SettingWhereInput
  }


  /**
   * Setting upsert
   */
  export type SettingUpsertArgs = {
    /**
     * Select specific fields to fetch from the Setting
    **/
    select?: SettingSelect | null
    /**
     * The filter to search for the Setting to update in case it exists.
    **/
    where: SettingWhereUniqueInput
    /**
     * In case the Setting found by the `where` argument doesn't exist, create a new Setting with this data.
    **/
    create: XOR<SettingUncheckedCreateInput, SettingCreateInput>
    /**
     * In case the Setting was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<SettingUncheckedUpdateInput, SettingUpdateInput>
  }


  /**
   * Setting delete
   */
  export type SettingDeleteArgs = {
    /**
     * Select specific fields to fetch from the Setting
    **/
    select?: SettingSelect | null
    /**
     * Filter which Setting to delete.
    **/
    where: SettingWhereUniqueInput
  }


  /**
   * Setting deleteMany
   */
  export type SettingDeleteManyArgs = {
    where?: SettingWhereInput
  }


  /**
   * Setting without action
   */
  export type SettingArgs = {
    /**
     * Select specific fields to fetch from the Setting
    **/
    select?: SettingSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    roleId: 'roleId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserRoleScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type UserRoleScalarFieldEnum = (typeof UserRoleScalarFieldEnum)[keyof typeof UserRoleScalarFieldEnum]


  export const JobScalarFieldEnum: {
    id: 'id',
    title: 'title',
    position: 'position',
    companyName: 'companyName',
    companyLogo: 'companyLogo',
    companyLocation: 'companyLocation',
    url: 'url',
    createdAt: 'createdAt',
    userId: 'userId',
    categoryId: 'categoryId',
    typeId: 'typeId'
  };

  export type JobScalarFieldEnum = (typeof JobScalarFieldEnum)[keyof typeof JobScalarFieldEnum]


  export const JobCategoryScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type JobCategoryScalarFieldEnum = (typeof JobCategoryScalarFieldEnum)[keyof typeof JobCategoryScalarFieldEnum]


  export const JobTypeScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type JobTypeScalarFieldEnum = (typeof JobTypeScalarFieldEnum)[keyof typeof JobTypeScalarFieldEnum]


  export const SettingScalarFieldEnum: {
    name: 'name',
    value: 'value'
  };

  export type SettingScalarFieldEnum = (typeof SettingScalarFieldEnum)[keyof typeof SettingScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    username?: StringFilter | string
    password?: StringFilter | string
    roleId?: IntFilter | number
    role?: XOR<UserRoleWhereInput, UserRoleRelationFilter>
    Job?: JobListRelationFilter
  }

  export type UserOrderByInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    roleId?: SortOrder
    role?: UserRoleOrderByInput
  }

  export type UserWhereUniqueInput = {
    id?: number
  }

  export type UserRoleWhereInput = {
    AND?: Enumerable<UserRoleWhereInput>
    OR?: Enumerable<UserRoleWhereInput>
    NOT?: Enumerable<UserRoleWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    user?: UserListRelationFilter
  }

  export type UserRoleOrderByInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type UserRoleWhereUniqueInput = {
    id?: number
  }

  export type JobWhereInput = {
    AND?: Enumerable<JobWhereInput>
    OR?: Enumerable<JobWhereInput>
    NOT?: Enumerable<JobWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    position?: StringFilter | string
    companyName?: StringFilter | string
    companyLogo?: StringFilter | string
    companyLocation?: StringFilter | string
    url?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    userId?: IntFilter | number
    user?: XOR<UserWhereInput, UserRelationFilter>
    categoryId?: IntFilter | number
    category?: XOR<JobCategoryWhereInput, JobCategoryRelationFilter>
    typeId?: IntFilter | number
    type?: XOR<JobTypeWhereInput, JobTypeRelationFilter>
  }

  export type JobOrderByInput = {
    id?: SortOrder
    title?: SortOrder
    position?: SortOrder
    companyName?: SortOrder
    companyLogo?: SortOrder
    companyLocation?: SortOrder
    url?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByInput
    categoryId?: SortOrder
    category?: JobCategoryOrderByInput
    typeId?: SortOrder
    type?: JobTypeOrderByInput
  }

  export type JobWhereUniqueInput = {
    id?: number
  }

  export type JobCategoryWhereInput = {
    AND?: Enumerable<JobCategoryWhereInput>
    OR?: Enumerable<JobCategoryWhereInput>
    NOT?: Enumerable<JobCategoryWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    Job?: JobListRelationFilter
  }

  export type JobCategoryOrderByInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type JobCategoryWhereUniqueInput = {
    id?: number
  }

  export type JobTypeWhereInput = {
    AND?: Enumerable<JobTypeWhereInput>
    OR?: Enumerable<JobTypeWhereInput>
    NOT?: Enumerable<JobTypeWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    Job?: JobListRelationFilter
  }

  export type JobTypeOrderByInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type JobTypeWhereUniqueInput = {
    id?: number
  }

  export type SettingWhereInput = {
    AND?: Enumerable<SettingWhereInput>
    OR?: Enumerable<SettingWhereInput>
    NOT?: Enumerable<SettingWhereInput>
    name?: StringFilter | string
    value?: StringFilter | string
  }

  export type SettingOrderByInput = {
    name?: SortOrder
    value?: SortOrder
  }

  export type SettingWhereUniqueInput = {
    name?: string
  }

  export type UserCreateInput = {
    username: string
    password: string
    role: UserRoleCreateNestedOneWithoutUserInput
    Job?: JobCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    username: string
    password: string
    roleId: number
    Job?: JobUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: UserRoleUpdateOneRequiredWithoutUserInput
    Job?: JobUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
    Job?: JobUncheckedUpdateManyWithoutUserInput
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
  }

  export type UserRoleCreateInput = {
    name: string
    user?: UserCreateNestedManyWithoutRoleInput
  }

  export type UserRoleUncheckedCreateInput = {
    id?: number
    name: string
    user?: UserUncheckedCreateNestedManyWithoutRoleInput
  }

  export type UserRoleUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateManyWithoutRoleInput
  }

  export type UserRoleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    user?: UserUncheckedUpdateManyWithoutRoleInput
  }

  export type UserRoleUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type UserRoleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type JobCreateInput = {
    title: string
    position: string
    companyName: string
    companyLogo: string
    companyLocation: string
    url: string
    createdAt: Date | string
    user: UserCreateNestedOneWithoutJobInput
    category: JobCategoryCreateNestedOneWithoutJobInput
    type: JobTypeCreateNestedOneWithoutJobInput
  }

  export type JobUncheckedCreateInput = {
    id?: number
    title: string
    position: string
    companyName: string
    companyLogo: string
    companyLocation: string
    url: string
    createdAt: Date | string
    userId: number
    categoryId: number
    typeId: number
  }

  export type JobUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    companyLogo?: StringFieldUpdateOperationsInput | string
    companyLocation?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutJobInput
    category?: JobCategoryUpdateOneRequiredWithoutJobInput
    type?: JobTypeUpdateOneRequiredWithoutJobInput
  }

  export type JobUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    companyLogo?: StringFieldUpdateOperationsInput | string
    companyLocation?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
  }

  export type JobUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    companyLogo?: StringFieldUpdateOperationsInput | string
    companyLocation?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    companyLogo?: StringFieldUpdateOperationsInput | string
    companyLocation?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
  }

  export type JobCategoryCreateInput = {
    name: string
    Job?: JobCreateNestedManyWithoutCategoryInput
  }

  export type JobCategoryUncheckedCreateInput = {
    id?: number
    name: string
    Job?: JobUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type JobCategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    Job?: JobUpdateManyWithoutCategoryInput
  }

  export type JobCategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    Job?: JobUncheckedUpdateManyWithoutCategoryInput
  }

  export type JobCategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type JobCategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type JobTypeCreateInput = {
    name: string
    Job?: JobCreateNestedManyWithoutTypeInput
  }

  export type JobTypeUncheckedCreateInput = {
    id?: number
    name: string
    Job?: JobUncheckedCreateNestedManyWithoutTypeInput
  }

  export type JobTypeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    Job?: JobUpdateManyWithoutTypeInput
  }

  export type JobTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    Job?: JobUncheckedUpdateManyWithoutTypeInput
  }

  export type JobTypeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type JobTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SettingCreateInput = {
    name: string
    value: string
  }

  export type SettingUncheckedCreateInput = {
    name: string
    value: string
  }

  export type SettingUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type SettingUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type SettingUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type SettingUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type UserRoleRelationFilter = {
    is?: UserRoleWhereInput
    isNot?: UserRoleWhereInput
  }

  export type JobListRelationFilter = {
    every?: JobWhereInput
    some?: JobWhereInput
    none?: JobWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type JobCategoryRelationFilter = {
    is?: JobCategoryWhereInput
    isNot?: JobCategoryWhereInput
  }

  export type JobTypeRelationFilter = {
    is?: JobTypeWhereInput
    isNot?: JobTypeWhereInput
  }

  export type UserRoleCreateNestedOneWithoutUserInput = {
    create?: XOR<UserRoleUncheckedCreateWithoutUserInput, UserRoleCreateWithoutUserInput>
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput
    connect?: UserRoleWhereUniqueInput
  }

  export type JobCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<JobUncheckedCreateWithoutUserInput>, Enumerable<JobCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<JobCreateOrConnectWithoutUserInput>
    connect?: Enumerable<JobWhereUniqueInput>
  }

  export type JobUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<JobUncheckedCreateWithoutUserInput>, Enumerable<JobCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<JobCreateOrConnectWithoutUserInput>
    connect?: Enumerable<JobWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type UserRoleUpdateOneRequiredWithoutUserInput = {
    create?: XOR<UserRoleUncheckedCreateWithoutUserInput, UserRoleCreateWithoutUserInput>
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput
    upsert?: UserRoleUpsertWithoutUserInput
    connect?: UserRoleWhereUniqueInput
    update?: XOR<UserRoleUncheckedUpdateWithoutUserInput, UserRoleUpdateWithoutUserInput>
  }

  export type JobUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<JobUncheckedCreateWithoutUserInput>, Enumerable<JobCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<JobCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<JobUpsertWithWhereUniqueWithoutUserInput>
    connect?: Enumerable<JobWhereUniqueInput>
    set?: Enumerable<JobWhereUniqueInput>
    disconnect?: Enumerable<JobWhereUniqueInput>
    delete?: Enumerable<JobWhereUniqueInput>
    update?: Enumerable<JobUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<JobUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<JobScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type JobUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<JobUncheckedCreateWithoutUserInput>, Enumerable<JobCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<JobCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<JobUpsertWithWhereUniqueWithoutUserInput>
    connect?: Enumerable<JobWhereUniqueInput>
    set?: Enumerable<JobWhereUniqueInput>
    disconnect?: Enumerable<JobWhereUniqueInput>
    delete?: Enumerable<JobWhereUniqueInput>
    update?: Enumerable<JobUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<JobUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<JobScalarWhereInput>
  }

  export type UserCreateNestedManyWithoutRoleInput = {
    create?: XOR<Enumerable<UserUncheckedCreateWithoutRoleInput>, Enumerable<UserCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRoleInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<Enumerable<UserUncheckedCreateWithoutRoleInput>, Enumerable<UserCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRoleInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserUpdateManyWithoutRoleInput = {
    create?: XOR<Enumerable<UserUncheckedCreateWithoutRoleInput>, Enumerable<UserCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRoleInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutRoleInput>
    connect?: Enumerable<UserWhereUniqueInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutRoleInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutRoleInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutRoleInput = {
    create?: XOR<Enumerable<UserUncheckedCreateWithoutRoleInput>, Enumerable<UserCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRoleInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutRoleInput>
    connect?: Enumerable<UserWhereUniqueInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutRoleInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutRoleInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutJobInput = {
    create?: XOR<UserUncheckedCreateWithoutJobInput, UserCreateWithoutJobInput>
    connectOrCreate?: UserCreateOrConnectWithoutJobInput
    connect?: UserWhereUniqueInput
  }

  export type JobCategoryCreateNestedOneWithoutJobInput = {
    create?: XOR<JobCategoryUncheckedCreateWithoutJobInput, JobCategoryCreateWithoutJobInput>
    connectOrCreate?: JobCategoryCreateOrConnectWithoutJobInput
    connect?: JobCategoryWhereUniqueInput
  }

  export type JobTypeCreateNestedOneWithoutJobInput = {
    create?: XOR<JobTypeUncheckedCreateWithoutJobInput, JobTypeCreateWithoutJobInput>
    connectOrCreate?: JobTypeCreateOrConnectWithoutJobInput
    connect?: JobTypeWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutJobInput = {
    create?: XOR<UserUncheckedCreateWithoutJobInput, UserCreateWithoutJobInput>
    connectOrCreate?: UserCreateOrConnectWithoutJobInput
    upsert?: UserUpsertWithoutJobInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUncheckedUpdateWithoutJobInput, UserUpdateWithoutJobInput>
  }

  export type JobCategoryUpdateOneRequiredWithoutJobInput = {
    create?: XOR<JobCategoryUncheckedCreateWithoutJobInput, JobCategoryCreateWithoutJobInput>
    connectOrCreate?: JobCategoryCreateOrConnectWithoutJobInput
    upsert?: JobCategoryUpsertWithoutJobInput
    connect?: JobCategoryWhereUniqueInput
    update?: XOR<JobCategoryUncheckedUpdateWithoutJobInput, JobCategoryUpdateWithoutJobInput>
  }

  export type JobTypeUpdateOneRequiredWithoutJobInput = {
    create?: XOR<JobTypeUncheckedCreateWithoutJobInput, JobTypeCreateWithoutJobInput>
    connectOrCreate?: JobTypeCreateOrConnectWithoutJobInput
    upsert?: JobTypeUpsertWithoutJobInput
    connect?: JobTypeWhereUniqueInput
    update?: XOR<JobTypeUncheckedUpdateWithoutJobInput, JobTypeUpdateWithoutJobInput>
  }

  export type JobCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<JobUncheckedCreateWithoutCategoryInput>, Enumerable<JobCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<JobCreateOrConnectWithoutCategoryInput>
    connect?: Enumerable<JobWhereUniqueInput>
  }

  export type JobUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<JobUncheckedCreateWithoutCategoryInput>, Enumerable<JobCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<JobCreateOrConnectWithoutCategoryInput>
    connect?: Enumerable<JobWhereUniqueInput>
  }

  export type JobUpdateManyWithoutCategoryInput = {
    create?: XOR<Enumerable<JobUncheckedCreateWithoutCategoryInput>, Enumerable<JobCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<JobCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<JobUpsertWithWhereUniqueWithoutCategoryInput>
    connect?: Enumerable<JobWhereUniqueInput>
    set?: Enumerable<JobWhereUniqueInput>
    disconnect?: Enumerable<JobWhereUniqueInput>
    delete?: Enumerable<JobWhereUniqueInput>
    update?: Enumerable<JobUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<JobUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<JobScalarWhereInput>
  }

  export type JobUncheckedUpdateManyWithoutCategoryInput = {
    create?: XOR<Enumerable<JobUncheckedCreateWithoutCategoryInput>, Enumerable<JobCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<JobCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<JobUpsertWithWhereUniqueWithoutCategoryInput>
    connect?: Enumerable<JobWhereUniqueInput>
    set?: Enumerable<JobWhereUniqueInput>
    disconnect?: Enumerable<JobWhereUniqueInput>
    delete?: Enumerable<JobWhereUniqueInput>
    update?: Enumerable<JobUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<JobUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<JobScalarWhereInput>
  }

  export type JobCreateNestedManyWithoutTypeInput = {
    create?: XOR<Enumerable<JobUncheckedCreateWithoutTypeInput>, Enumerable<JobCreateWithoutTypeInput>>
    connectOrCreate?: Enumerable<JobCreateOrConnectWithoutTypeInput>
    connect?: Enumerable<JobWhereUniqueInput>
  }

  export type JobUncheckedCreateNestedManyWithoutTypeInput = {
    create?: XOR<Enumerable<JobUncheckedCreateWithoutTypeInput>, Enumerable<JobCreateWithoutTypeInput>>
    connectOrCreate?: Enumerable<JobCreateOrConnectWithoutTypeInput>
    connect?: Enumerable<JobWhereUniqueInput>
  }

  export type JobUpdateManyWithoutTypeInput = {
    create?: XOR<Enumerable<JobUncheckedCreateWithoutTypeInput>, Enumerable<JobCreateWithoutTypeInput>>
    connectOrCreate?: Enumerable<JobCreateOrConnectWithoutTypeInput>
    upsert?: Enumerable<JobUpsertWithWhereUniqueWithoutTypeInput>
    connect?: Enumerable<JobWhereUniqueInput>
    set?: Enumerable<JobWhereUniqueInput>
    disconnect?: Enumerable<JobWhereUniqueInput>
    delete?: Enumerable<JobWhereUniqueInput>
    update?: Enumerable<JobUpdateWithWhereUniqueWithoutTypeInput>
    updateMany?: Enumerable<JobUpdateManyWithWhereWithoutTypeInput>
    deleteMany?: Enumerable<JobScalarWhereInput>
  }

  export type JobUncheckedUpdateManyWithoutTypeInput = {
    create?: XOR<Enumerable<JobUncheckedCreateWithoutTypeInput>, Enumerable<JobCreateWithoutTypeInput>>
    connectOrCreate?: Enumerable<JobCreateOrConnectWithoutTypeInput>
    upsert?: Enumerable<JobUpsertWithWhereUniqueWithoutTypeInput>
    connect?: Enumerable<JobWhereUniqueInput>
    set?: Enumerable<JobWhereUniqueInput>
    disconnect?: Enumerable<JobWhereUniqueInput>
    delete?: Enumerable<JobWhereUniqueInput>
    update?: Enumerable<JobUpdateWithWhereUniqueWithoutTypeInput>
    updateMany?: Enumerable<JobUpdateManyWithWhereWithoutTypeInput>
    deleteMany?: Enumerable<JobScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type UserRoleCreateWithoutUserInput = {
    name: string
  }

  export type UserRoleUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
  }

  export type UserRoleCreateOrConnectWithoutUserInput = {
    where: UserRoleWhereUniqueInput
    create: XOR<UserRoleUncheckedCreateWithoutUserInput, UserRoleCreateWithoutUserInput>
  }

  export type JobCreateWithoutUserInput = {
    title: string
    position: string
    companyName: string
    companyLogo: string
    companyLocation: string
    url: string
    createdAt: Date | string
    category: JobCategoryCreateNestedOneWithoutJobInput
    type: JobTypeCreateNestedOneWithoutJobInput
  }

  export type JobUncheckedCreateWithoutUserInput = {
    id?: number
    title: string
    position: string
    companyName: string
    companyLogo: string
    companyLocation: string
    url: string
    createdAt: Date | string
    categoryId: number
    typeId: number
  }

  export type JobCreateOrConnectWithoutUserInput = {
    where: JobWhereUniqueInput
    create: XOR<JobUncheckedCreateWithoutUserInput, JobCreateWithoutUserInput>
  }

  export type UserRoleUpsertWithoutUserInput = {
    update: XOR<UserRoleUncheckedUpdateWithoutUserInput, UserRoleUpdateWithoutUserInput>
    create: XOR<UserRoleUncheckedCreateWithoutUserInput, UserRoleCreateWithoutUserInput>
  }

  export type UserRoleUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type UserRoleUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type JobUpsertWithWhereUniqueWithoutUserInput = {
    where: JobWhereUniqueInput
    update: XOR<JobUncheckedUpdateWithoutUserInput, JobUpdateWithoutUserInput>
    create: XOR<JobUncheckedCreateWithoutUserInput, JobCreateWithoutUserInput>
  }

  export type JobUpdateWithWhereUniqueWithoutUserInput = {
    where: JobWhereUniqueInput
    data: XOR<JobUncheckedUpdateWithoutUserInput, JobUpdateWithoutUserInput>
  }

  export type JobUpdateManyWithWhereWithoutUserInput = {
    where: JobScalarWhereInput
    data: XOR<JobUncheckedUpdateManyWithoutJobInput, JobUpdateManyMutationInput>
  }

  export type JobScalarWhereInput = {
    AND?: Enumerable<JobScalarWhereInput>
    OR?: Enumerable<JobScalarWhereInput>
    NOT?: Enumerable<JobScalarWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    position?: StringFilter | string
    companyName?: StringFilter | string
    companyLogo?: StringFilter | string
    companyLocation?: StringFilter | string
    url?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    userId?: IntFilter | number
    categoryId?: IntFilter | number
    typeId?: IntFilter | number
  }

  export type UserCreateWithoutRoleInput = {
    username: string
    password: string
    Job?: JobCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRoleInput = {
    id?: number
    username: string
    password: string
    Job?: JobUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRoleInput = {
    where: UserWhereUniqueInput
    create: XOR<UserUncheckedCreateWithoutRoleInput, UserCreateWithoutRoleInput>
  }

  export type UserUpsertWithWhereUniqueWithoutRoleInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUncheckedUpdateWithoutRoleInput, UserUpdateWithoutRoleInput>
    create: XOR<UserUncheckedCreateWithoutRoleInput, UserCreateWithoutRoleInput>
  }

  export type UserUpdateWithWhereUniqueWithoutRoleInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUncheckedUpdateWithoutRoleInput, UserUpdateWithoutRoleInput>
  }

  export type UserUpdateManyWithWhereWithoutRoleInput = {
    where: UserScalarWhereInput
    data: XOR<UserUncheckedUpdateManyWithoutUserInput, UserUpdateManyMutationInput>
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>
    OR?: Enumerable<UserScalarWhereInput>
    NOT?: Enumerable<UserScalarWhereInput>
    id?: IntFilter | number
    username?: StringFilter | string
    password?: StringFilter | string
    roleId?: IntFilter | number
  }

  export type UserCreateWithoutJobInput = {
    username: string
    password: string
    role: UserRoleCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutJobInput = {
    id?: number
    username: string
    password: string
    roleId: number
  }

  export type UserCreateOrConnectWithoutJobInput = {
    where: UserWhereUniqueInput
    create: XOR<UserUncheckedCreateWithoutJobInput, UserCreateWithoutJobInput>
  }

  export type JobCategoryCreateWithoutJobInput = {
    name: string
  }

  export type JobCategoryUncheckedCreateWithoutJobInput = {
    id?: number
    name: string
  }

  export type JobCategoryCreateOrConnectWithoutJobInput = {
    where: JobCategoryWhereUniqueInput
    create: XOR<JobCategoryUncheckedCreateWithoutJobInput, JobCategoryCreateWithoutJobInput>
  }

  export type JobTypeCreateWithoutJobInput = {
    name: string
  }

  export type JobTypeUncheckedCreateWithoutJobInput = {
    id?: number
    name: string
  }

  export type JobTypeCreateOrConnectWithoutJobInput = {
    where: JobTypeWhereUniqueInput
    create: XOR<JobTypeUncheckedCreateWithoutJobInput, JobTypeCreateWithoutJobInput>
  }

  export type UserUpsertWithoutJobInput = {
    update: XOR<UserUncheckedUpdateWithoutJobInput, UserUpdateWithoutJobInput>
    create: XOR<UserUncheckedCreateWithoutJobInput, UserCreateWithoutJobInput>
  }

  export type UserUpdateWithoutJobInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: UserRoleUpdateOneRequiredWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutJobInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
  }

  export type JobCategoryUpsertWithoutJobInput = {
    update: XOR<JobCategoryUncheckedUpdateWithoutJobInput, JobCategoryUpdateWithoutJobInput>
    create: XOR<JobCategoryUncheckedCreateWithoutJobInput, JobCategoryCreateWithoutJobInput>
  }

  export type JobCategoryUpdateWithoutJobInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type JobCategoryUncheckedUpdateWithoutJobInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type JobTypeUpsertWithoutJobInput = {
    update: XOR<JobTypeUncheckedUpdateWithoutJobInput, JobTypeUpdateWithoutJobInput>
    create: XOR<JobTypeUncheckedCreateWithoutJobInput, JobTypeCreateWithoutJobInput>
  }

  export type JobTypeUpdateWithoutJobInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type JobTypeUncheckedUpdateWithoutJobInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type JobCreateWithoutCategoryInput = {
    title: string
    position: string
    companyName: string
    companyLogo: string
    companyLocation: string
    url: string
    createdAt: Date | string
    user: UserCreateNestedOneWithoutJobInput
    type: JobTypeCreateNestedOneWithoutJobInput
  }

  export type JobUncheckedCreateWithoutCategoryInput = {
    id?: number
    title: string
    position: string
    companyName: string
    companyLogo: string
    companyLocation: string
    url: string
    createdAt: Date | string
    userId: number
    typeId: number
  }

  export type JobCreateOrConnectWithoutCategoryInput = {
    where: JobWhereUniqueInput
    create: XOR<JobUncheckedCreateWithoutCategoryInput, JobCreateWithoutCategoryInput>
  }

  export type JobUpsertWithWhereUniqueWithoutCategoryInput = {
    where: JobWhereUniqueInput
    update: XOR<JobUncheckedUpdateWithoutCategoryInput, JobUpdateWithoutCategoryInput>
    create: XOR<JobUncheckedCreateWithoutCategoryInput, JobCreateWithoutCategoryInput>
  }

  export type JobUpdateWithWhereUniqueWithoutCategoryInput = {
    where: JobWhereUniqueInput
    data: XOR<JobUncheckedUpdateWithoutCategoryInput, JobUpdateWithoutCategoryInput>
  }

  export type JobUpdateManyWithWhereWithoutCategoryInput = {
    where: JobScalarWhereInput
    data: XOR<JobUncheckedUpdateManyWithoutJobInput, JobUpdateManyMutationInput>
  }

  export type JobCreateWithoutTypeInput = {
    title: string
    position: string
    companyName: string
    companyLogo: string
    companyLocation: string
    url: string
    createdAt: Date | string
    user: UserCreateNestedOneWithoutJobInput
    category: JobCategoryCreateNestedOneWithoutJobInput
  }

  export type JobUncheckedCreateWithoutTypeInput = {
    id?: number
    title: string
    position: string
    companyName: string
    companyLogo: string
    companyLocation: string
    url: string
    createdAt: Date | string
    userId: number
    categoryId: number
  }

  export type JobCreateOrConnectWithoutTypeInput = {
    where: JobWhereUniqueInput
    create: XOR<JobUncheckedCreateWithoutTypeInput, JobCreateWithoutTypeInput>
  }

  export type JobUpsertWithWhereUniqueWithoutTypeInput = {
    where: JobWhereUniqueInput
    update: XOR<JobUncheckedUpdateWithoutTypeInput, JobUpdateWithoutTypeInput>
    create: XOR<JobUncheckedCreateWithoutTypeInput, JobCreateWithoutTypeInput>
  }

  export type JobUpdateWithWhereUniqueWithoutTypeInput = {
    where: JobWhereUniqueInput
    data: XOR<JobUncheckedUpdateWithoutTypeInput, JobUpdateWithoutTypeInput>
  }

  export type JobUpdateManyWithWhereWithoutTypeInput = {
    where: JobScalarWhereInput
    data: XOR<JobUncheckedUpdateManyWithoutJobInput, JobUpdateManyMutationInput>
  }

  export type JobUpdateWithoutUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    companyLogo?: StringFieldUpdateOperationsInput | string
    companyLocation?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: JobCategoryUpdateOneRequiredWithoutJobInput
    type?: JobTypeUpdateOneRequiredWithoutJobInput
  }

  export type JobUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    companyLogo?: StringFieldUpdateOperationsInput | string
    companyLocation?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
  }

  export type JobUncheckedUpdateManyWithoutJobInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    companyLogo?: StringFieldUpdateOperationsInput | string
    companyLocation?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
  }

  export type UserUpdateWithoutRoleInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    Job?: JobUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    Job?: JobUncheckedUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type JobUpdateWithoutCategoryInput = {
    title?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    companyLogo?: StringFieldUpdateOperationsInput | string
    companyLocation?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutJobInput
    type?: JobTypeUpdateOneRequiredWithoutJobInput
  }

  export type JobUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    companyLogo?: StringFieldUpdateOperationsInput | string
    companyLocation?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
  }

  export type JobUpdateWithoutTypeInput = {
    title?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    companyLogo?: StringFieldUpdateOperationsInput | string
    companyLocation?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutJobInput
    category?: JobCategoryUpdateOneRequiredWithoutJobInput
  }

  export type JobUncheckedUpdateWithoutTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    companyLogo?: StringFieldUpdateOperationsInput | string
    companyLocation?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}